openapi: 3.0.0
info:
    version: 1.0.0
    title: Limbo Quiz App API
    description: API documentation for the Limbo quiz application on iOS and Android.

components:
    securitySchemes:
        Authorization:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: 'JWT Authorization header using the Bearer scheme. Example: "Bearer mytokenblabla"'
            x-example: 'Bearer your-jwt-token-here'

paths:
    /user/signin:
        post:
            tags:
                - User credentials
            summary: Sign in user
            description: |
                This endpoint allows to sign in to user account by providing the necessary information.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                    example: admin@admin.com
                                password:
                                    type: string
                                    example: password
            responses:
                '200':
                    description: User signed in successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    authToken:
                                        type: string
                                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                                    firstName:
                                        type: string
                                        example: John
                                    lastName:
                                        type: string
                                        example: Doe
                                    email:
                                        type: string
                                        format: email
                                        example: '2115@edu.p.lodz.pl'
                                    image:
                                        type: string
                                        example: 'https://i.imgur.com/4QF3nZu.png'
                                    points:
                                        type: number
                                        example: 0
                '400':
                    description: Bad request. Check the request parameters.
                '401':
                    description: Unauthorized. Incorrect username or password.
                '500':
                    description: Internal server error. Something went wrong on the server side.

    /user/signup:
        post:
            tags:
                - User credentials
            summary: Register a new user account
            description: |
                This endpoint allows the registration of a new user account by providing the necessary information.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                firstName:
                                    type: string
                                    example: John
                                lastName:
                                    type: string
                                    example: Doe
                                password:
                                    type: string
                                    example: password
                                email:
                                    type: string
                                    format: email
                                    example: '2115@edu.p.lodz.pl'
            responses:
                '201':
                    description: User account registered successfully.
                '400':
                    description: Bad request. Check the request parameters.
                '409':
                    description: User already exists
                '500':
                    description: Internal server error. Something went wrong on the server side.

    /user/signout:
        post:
            tags:
                - User credentials
            summary: Signs out the current user
            operationId: logoutUser
            security:
                - Authorization: [] # Apply the Bearer authentication scheme to this operation
            responses:
                '200':
                    description: User has been successfully signed out.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'User has been signed out successfully.'
                                        description: Human-readable message indicating successful logout.
                '401':
                    description: Unauthorized. No valid JWT token was provided in the Authorization header.
            parameters:
                - in: header
                  name: Authorization
                  schema:
                      type: string
                      format: bearer
                  example: '"Bearer your-jwt-token-here"'
                  required: true
    /user/chapters:
        get:
            tags:
                - User tasks
            summary: Get a list of progress in chapters
            description: |
                This endpoint allows to fetch a list of progress in chapters.
            security:
                - Authorization: []
            responses:
                '200':
                    description: User allowed to get chapters.
                    content:
                        application/json:
                            example:
                                - chapterId: '657af677df0ef993445d1477'
                                  chapterTitle: 'Loops'
                                  maximumQuizzes: 15
                                  doneQuizzes: 10
                                  percentage: 66
                                - chapterId: '657af677df0ef993045d1278'
                                  chapterTitle: 'Recursion'
                                  maximumQuizzes: 7
                                  doneQuizzes: 7
                                  percentage: 100
                                - chapterId: '657af677df0ef993045d1279'
                                  chapterTitle: 'Arrays'
                                  maximumQuizzes: 10
                                  doneQuizzes: 0
                                  percentage: 0
                '401':
                    description: Invalid or none auth token provided.
                '500':
                    description: Internal server error. Something went wrong on the server side.
            parameters:
                - in: header
                  name: Authorization
                  schema:
                      type: string
                      format: bearer
                  example: '"Bearer your-jwt-token-here"'
                  required: true

    /user/chapters/{chapterId}/quizzes:
        get:
            tags:
                - User tasks
            summary: Get a list of progress in quizzes of chapter
            description: |
                This endpoint allows to fetch a list of progress in quizzes of a given chapter.
            security:
                - Authorization: []
            responses:
                '200':
                    description: User allowed to get quizzes.
                    content:
                        application/json:
                            example:
                                - quizId: '657af677df0ef993045d1279'
                                  quizTitle: 'Integers and Floats'
                                  isDone: False
                                - quizId: '657af677df0ef993045d6478'
                                  quizTitle: 'Strings'
                                  isDone: True
                                - quizId: '657af677df0ef993445d1477'
                                  quizTitle: 'Doubles, shorts and longs'
                                  isDone: True
                '400':
                    description: Bad request. Check the request parameters.
                '401':
                    description: Invalid or none auth token provided.
                '500':
                    description: Internal server error. Something went wrong on the server side.
            parameters:
                - in: header
                  name: Authorization
                  schema:
                      type: string
                      format: bearer
                  example: '"Bearer your-jwt-token-here"'
                  required: true
                - in: path
                  name: chapterId
                  schema:
                      type: string
                      format: string
                  example: 657af676df0ef993045d1431
                  required: true

    /user/quizzes/{quizId}/questions:
        get:
            tags:
                - User tasks
            summary: Get a list of questions in a quiz
            description: |
                This endpoint allows to fetch a list of questions in a given quiz
            security:
                - Authorization: []
            responses:
                '200':
                    description: User allowed to get questions.
                    content:
                        application/json:
                            example:
                                - questionId: '657af677df0ef993045d6478'
                                  description: 'What is the main characteristic of a float?'
                                  answers:
                                      - 'It can be positive or negative'
                                      - 'It can be a whole number'
                                      - 'It can be a decimal number'
                                      - 'It can be a fraction'

                                - questionId: '657af677df0ef993045d1279'
                                  description: 'Why is 1.0 a float?'
                                  answers:
                                      - 'Because it has a decimal point'
                                      - 'Because it is a whole number'
                                      - 'Because it is a fraction'
                                      - 'Because it is a negative number'

                                - questionId: '657af677df0ef993445d1477'
                                  description: 'What is the result of 1 + 1?'
                                  answers:
                                      - '2'
                                      - '3'
                                      - '4'
                                      - '5'
                '400':
                    description: Bad request. Check the request parameters.
                '401':
                    description: Invalid or none auth token provided.
                '409':
                    description: User already did that quiz.
                '500':
                    description: Internal server error. Something went wrong on the server side.
            parameters:
                - in: header
                  name: Authorization
                  schema:
                      type: string
                      format: bearer
                  example: '"Bearer your-jwt-token-here"'
                  required: true
                - in: path
                  name: quizId
                  schema:
                      type: string
                      format: string
                  example: 657af676df0ef993045d1431
                  required: true

    /user/activity:
        get:
            tags:
                - User info
            summary: Get a list of points achieved by user in a given time period
            description: |
                This endpoint allows to fetch a list of points achieved by user in a given time period. Period is inclusive in the lower bound (startDate) and exclusive in the upper bound.
            security:
                - Authorization: []
            responses:
                '200':
                    description: User allowed to get activity list.
                    content:
                        application/json:
                            example:
                                - date: '2023-12-09T00:00:00.000Z'
                                  points: 0
                                - date: '2023-12-10T00:00:00.000Z'
                                  points: 100
                                - date: '2023-12-11T00:00:00.000Z'
                                  points: 300
                '401':
                    description: Invalid or none auth token provided.
                '500':
                    description: Internal server error. Something went wrong on the server side.
            parameters:
                - in: header
                  name: Authorization
                  schema:
                      type: string
                      format: bearer
                  example: '"Bearer your-jwt-token-here"'
                  required: true
                - name: startDate
                  in: query
                  description: StartDate to filter by in american format (YYYY-MM-DD)
                  required: false
                  example: '2023-12-09'
                  schema:
                      type: string
                      default: 'current date - 6 days'
                - name: duration
                  in: query
                  description: Duration to filter by in days
                  required: false
                  example: 3
                  schema:
                      type: number
                      default: 7

    /user/stats:
        get:
            tags:
                - User info
            summary: Get a list of statistics
            description: |
                This endpoint allows to fetch a list of statistics: number of chapters done, quizzes done and descriptions of user rewards.
            security:
                - Authorization: []
            responses:
                '200':
                    description: User allowed to get stats.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    chaptersDone:
                                        type: number
                                        example: 1
                                    quizzesDone:
                                        type: number
                                        example: 5
                                    userRewards:
                                        type: array
                                        items:
                                            type: string
                                        example:
                                            - 'Reward 1'
                                            - 'Reward 2'
                '401':
                    description: Invalid or none auth token provided.
                '404':
                    description: User not found.
                '500':
                    description: Internal server error. Something went wrong on the server side.
            parameters:
                - in: header
                  name: Authorization
                  schema:
                      type: string
                      format: bearer
                  example: '"Bearer your-jwt-token-here"'
                  required: true

    /user/info:
        get:
            tags:
                - User info
            summary: Get a user info
            description: |
                This endpoint allows to fetch a user info.
            security:
                - Authorization: []
            responses:
                '200':
                    description: User allowed to get stats.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    firstName:
                                        type: string
                                        example: John
                                    lastName:
                                        type: string
                                        example: Doe
                                    email:
                                        type: string
                                        format: email
                                        example: '2115@edu.p.lodz.pl'
                                    image:
                                        type: string
                                        example: 'https://i.imgur.com/4QF3nZu.png'
                                    points:
                                        type: number
                                        example: 0
                '401':
                    description: Invalid or none auth token provided.'
                '404':
                    description: User not found.
                '500':
                    description: Internal server error. Something went wrong on the server side.
            parameters:
                - in: header
                  name: Authorization
                  schema:
                      type: string
                      format: bearer
                  example: '"Bearer your-jwt-token-here"'
                  required: true

    /user/password:
        patch:
            tags:
                - User credentials
            summary: Change user password
            description: |
                This endpoint allows to change user password.
            security:
                - Authorization: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                newPassword:
                                    type: string
                                oldPassword:
                                    type: string

            responses:
                '201':
                    description: Success.
                '400':
                    description: Bad request. Check the request parameters.
                '500':
                    description: Internal server error. Something went wrong on the server side.
            parameters:
                - in: header
                  name: Authorization
                  schema:
                      type: string
                      format: bearer
                  example: '"Bearer your-jwt-token-here"'
                  required: true

    /user/rewards/available:
        get:
            tags:
                - User rewards
            summary: Get a list of rewards user can buy
            description: |
                This endpoint allows user to get a list of rewards to buy (reward with certain id can only be bought once).
            security:
                - Authorization: []

            responses:
                '200':
                    description: User allowed to get a list of available rewards.
                    content:
                        application/json:
                            example:
                                - rewardId: '657af677df0ef993045d6478'
                                  rewardDescription: 'Reward 1'
                                  rewardCost: 100
                                - rewardId: '657af677df0ef993045d1279'
                                  rewardDescription: 'Reward 2'
                                  rewardCost: 200
                '401':
                    description: Invalid or none auth token provided.
                '500':
                    description: Internal server error. Something went wrong on the server side.
            parameters:
                - in: header
                  name: Authorization
                  schema:
                      type: string
                      format: bearer
                  example: '"Bearer your-jwt-token-here"'
                  required: true

    /user/rewards/{rewardId}:
        post:
            tags:
                - User rewards
            summary: Buy a reward with given id
            description: |
                This endpoint allows user to buy a reward (reward with certain id can only be bought once).
            security:
                - Authorization: []

            responses:
                '201':
                    description: User allowed to buy reward.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    newPoints:
                                        type: number
                                        example: 300
                '400':
                    description: Bad request. Check the request parameters.
                '401':
                    description: Invalid or none auth token provided.
                '404':
                    description: Reward / User not found.
                '409':
                    description: Reward already bought.
                '406':
                    description: Not enough points to buy reward.
                '500':
                    description: Internal server error. Something went wrong on the server side.
            parameters:
                - in: header
                  name: Authorization
                  schema:
                      type: string
                      format: bearer
                  example: '"Bearer your-jwt-token-here"'
                  required: true
                - in: path
                  name: rewardId
                  required: true
                  schema:
                      type: string
                  description: The ID of the reward to buy.
                  example: 657af676df0ef993045d1431

    /user/quizzes/{quizId}/answer:
        post:
            tags:
                - User tasks
            summary: Answer a quiz with a given id
            description: |
                This endpoint allows answering a quiz with the specified quizId.
            requestBody:
                required: true
                content:
                    application/json:
                        example:
                            - questionId: '657af677df0ef993045d6478'
                              answer: 'It can be a decimal number'
                            - questionId: '657af677df0ef993045d1279'
                              answer: 'Because it has a decimal point'
                            - questionId: '657af677df0ef993445d1477'
                              answer: '2'
            responses:
                '200':
                    description: User signed in successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    isCorrect:
                                        type: boolean
                                        example: true
                                    newPoints:
                                        type: number
                                        example: 0
                                    totalCorrectAnswers:
                                        type: number
                                        example: 1
                                    totalQuestions:
                                        type: number
                                        example: 3
                '400':
                    description: Bad request. Check the request parameters.
                '401':
                    description: Unauthorized. Incorrect username or password.
                '404':
                    description: User / Quiz not found.
                '409':
                    description: User already did that quiz.
                '500':
                    description: Internal server error. Something went wrong on the server side.
            parameters:
                - in: header
                  name: Authorization
                  schema:
                      type: string
                      format: bearer
                  example: '"Bearer your-jwt-token-here"'
                  required: true
                - in: path
                  name: quizId
                  required: true
                  schema:
                      type: string
                  description: The ID of the quiz to answer.
                  example: 657af676df0ef993045d1431
